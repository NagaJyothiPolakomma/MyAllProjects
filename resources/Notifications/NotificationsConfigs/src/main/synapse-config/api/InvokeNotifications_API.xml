<?xml version="1.0" encoding="UTF-8"?>
<api context="/SMS" name="InvokeNotifications_API" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="POST GET">
        <inSequence>
            <!-- Catch the DB response into parameters -->
            <propertyGroup description="req params">
                <property expression="get-property('MessageID')" name="req_id" scope="default" type="STRING"/>
                <property expression="json-eval($.template_id)" name="template_id" scope="default" type="STRING"/>
                <property expression="json-eval($)" name="request" scope="default" type="STRING"/>
                <property expression="json-eval($.system)" name="system" scope="default" type="STRING"/>
                <property expression="get-property('SYNAPSE_REST_API')" name="api_name" scope="default" type="STRING"/>
                <property expression="$ctx:REST_METHOD" name="http_method" scope="default" type="STRING"/>
                <property expression="json-eval($.MSISDN)" name="MSISDN" scope="default" type="STRING"/>
            </propertyGroup>
            <!-- Calling the write Dataservice to inseert the request details -->
            <log level="custom">
                <property expression="get-property('request')" name="input==>"/>
            </log>
            <dataServiceCall description="Input write ApiLogHandler" serviceName="NotificationsDS">
                <operations type="single">
                    <operation name="ApiLogHandler">
                        <param evaluator="xml" expression="$ctx:req_id" name="req_id"/>
                        <param evaluator="xml" expression="$ctx:system" name="system"/>
                        <param evaluator="xml" expression="$ctx:api_name" name="api_name"/>
                        <param evaluator="xml" expression="get-property('request')" name="request"/>
                        <param evaluator="xml" expression="$ctx:http_method" name="http_method"/>
                        <param name="response" value="null"/>
                        <param name="status" value="success"/>
                    </operation>
                </operations>
                <source type="inline"/>
                <target type="body"/>
            </dataServiceCall>
            <log description="==>validation" level="custom">
                <property name="==>" value="validation seq"/>
            </log>
            <sequence key="InputValidationSequence"/>
            <!-- Parameters loading into property mediators dynamically using js -->
            <payloadFactory media-type="json">
                <format>$1</format>
                <args>
                    <arg evaluator="xml" expression="$ctx:request"/>
                </args>
            </payloadFactory>
            <log description="i/p parameters access" level="custom">
                <property expression="json-eval($)" name="i/p params==>"/>
            </log>
            <script description="dynamic params loading" language="js"><![CDATA[var log = mc.getServiceLog();
         var jsonPayload = mc.getPayloadJSON();
         var parameters = jsonPayload.parameters;
   for (var key in parameters) {
            if (parameters.hasOwnProperty(key)) {
               var value = parameters[key];
                mc.setProperty(key, value); 
               /* log.info(value); */
            }
         }]]></script>
            <!-- Logging the each field -->
            <log description="lgging details">
                <property expression="$ctx:name" name="name"/>
                <property expression="$ctx:msisdn" name="msisdn"/>
                <property expression="$ctx:template_id" name="template_id"/>
                <property expression="$ctx:REST_METHOD" name="http_method"/>
                <property expression="get-property('SYNAPSE_REST_API')" name="api_name"/>
                <property expression="get-property('MessageID')" name="req_id"/>
                <property expression="get-property('transport', 'From')" name="senderAddress"/>
                <property expression="$url:From" name="Sender Address"/>
                <property expression="get-property('axis2','REMOTE_ADDR')" name="ip address"/>
            </log>
            <!-- Call the Database to get message template based on id -->
            <dataServiceCall description="ReadNotiTemplates from DB based on template_id" serviceName="NotificationsDS">
                <operations type="single">
                    <operation name="getBasedonId">
                        <param evaluator="xml" expression="$ctx:template_id" name="id"/>
                    </operation>
                </operations>
                <source type="inline"/>
                <target type="body"/>
            </dataServiceCall>
            <filter description="DSS result validation" regex="true" source="fn:string-length($body) > 0">
                <then>
                    <propertyGroup description="catch DB response">
                        <property expression="json-eval($.Notification.template_content)" name="template_content" scope="default" type="STRING"/>
                        <property expression="json-eval($.Notification.parameters)" name="parameters" scope="default" type="STRING"/>
                        <property expression="json-eval($.Notification.is_enabled)" name="is_enabled" scope="default" type="STRING"/>
                        <property expression="json-eval($)" name="db_response" scope="default" type="STRING"/>
                        <property expression="json-eval($.Notification.is_dynamic)" name="is_dynamic" scope="default" type="STRING"/>
                    </propertyGroup>
                    <log description="message" level="custom">
                        <property expression="json-eval($.Notification.template_content)" name="Message==>"/>
                        <property expression="$ctx:parameters" name="Parameters==>"/>
                        <property expression="$ctx:is_enabled" name="is_enabled==>"/>
                        <property expression="$ctx:is_dynamic" name="is_dynamic"/>
                    </log>
                    <!-- used the script mediator to change the message template with dynamic values -->
                    <filter regex="1" source="$ctx:is_enabled">
                        <then>
                            <filter regex="true" source="$ctx:is_dynamic">
                                <then>
                                    <script language="js"><![CDATA[var log = mc.getServiceLog();
            var message = mc.getProperty("template_content");
            var parameters = mc.getProperty("parameters").split(",");
    for (var i = 0; i < parameters.length; i++) {
            var parameter = parameters[i].trim();
          /* log.info(parameter);
			log.info(mc.getProperty(parameter)); */
                   var placeholder = "$" + parameter + "$";
              message = message.replace(placeholder, mc.getProperty(parameter)); 
            }
            mc.setProperty("message",message);
            log.info(message);]]></script>
                                </then>
                                <else>
                                    <property description="message" expression="$ctx:template_content" name="message" scope="default" type="STRING"/>
                                </else>
                            </filter>
                            <!-- Build the message in a format as required for backend call -->
                            <payloadFactory description="Build payload to mock " media-type="json">
                                <format>{&#xd;
"MSISDN":"$1",&#xd;
"req_id":"$2",&#xd;
"message":"$3"&#xd;
}</format>
                                <args>
                                    <arg evaluator="xml" expression="$ctx:msisdn"/>
                                    <arg evaluator="xml" expression="$ctx:req_id"/>
                                    <arg evaluator="xml" expression="$ctx:message"/>
                                </args>
                            </payloadFactory>
                            <property description="smse i/p" expression="json-eval($)" name="request" scope="default" type="STRING"/>
                            <!-- Call the SMSE dataservice to write the request data into DB -->
                            <dataServiceCall description="smse logs" serviceName="NotificationsDS">
                                <operations type="single">
                                    <operation name="smseLogHandler">
                                        <param evaluator="xml" expression="$ctx:req_id" name="req_id"/>
                                        <param evaluator="xml" expression="$ctx:msisdn" name="msisdn"/>
                                        <param evaluator="xml" expression="$ctx:request" name="request"/>
                                        <param name="response" value="null"/>
                                        <param name="status" value="null"/>
                                    </operation>
                                </operations>
                                <source type="inline"/>
                                <target type="body"/>
                            </dataServiceCall>
                            <!-- Call the backend service comes here -->
                            <log description="mock ser call" level="custom">
                                <property name="mock ser===>" value="Calling"/>
                            </log>
                            <call>
                                <endpoint key="Backend_mock_EP"/>
                            </call>
                            <propertyGroup description="response store">
                                <property expression="$axis2:HTTP_SC" name="status_code" scope="default" type="STRING"/>
                                <property expression="json-eval($)" name="response" scope="default" type="STRING"/>
                                <property expression="$axis2:HTTP_SC_DESC" name="status_desc" scope="default" type="STRING"/>
                            </propertyGroup>
                            <dataServiceCall description="write smse response to DB smse logs" serviceName="NotificationsDS">
                                <operations type="single">
                                    <operation name="updateSMSLogHandler">
                                        <param evaluator="xml" expression="$ctx:response" name="response"/>
                                        <param evaluator="xml" expression="$ctx:req_id" name="req_id"/>
                                        <param evaluator="xml" expression="$ctx:status_code" name="status"/>
                                    </operation>
                                </operations>
                                <source type="inline"/>
                                <target type="body"/>
                            </dataServiceCall>
                            <!-- Build the response payload -->
                            <payloadFactory description="building response" media-type="json">
                                <format>{&#xd;
  "status_code": "$1",&#xd;
  "status_desc": "$2",&#xd;
  "response":$3,&#xd;
  "template":"$4",&#xd;
   "message":"$5"&#xd;
}&#xd;
</format>
                                <args>
                                    <arg evaluator="xml" expression="$ctx:status_code"/>
                                    <arg evaluator="xml" expression="$ctx:status_desc"/>
                                    <arg evaluator="xml" expression="$ctx:response"/>
                                    <arg evaluator="xml" expression="$ctx:template_content"/>
                                    <arg evaluator="xml" expression="$ctx:message"/>
                                </args>
                            </payloadFactory>
                        </then>
                        <else>
                            <property description="response for no message" name="response" scope="default" type="STRING" value="There is no message for provided template_id(is_enabled is 0)"/>
                            <property description="ERROR_MESSAGE" name="ERROR_MESSAGE" scope="default" type="STRING" value="There is no message for provided template_id(is_enabled is 0)"/>
                            <property description="status_code" name="status_code" scope="default" type="STRING" value="200"/>
                            <!-- Build the response payload -->
                            <payloadFactory description="building response" media-type="json">
                                <format>{&#xd;
  "status_code": "200",&#xd;
  "status_desc": "success",&#xd;
  "response":"Template ID Error"&#xd;

}&#xd;
</format>
                                <args/>
                            </payloadFactory>
                        </else>
                    </filter>
                    <log description="res log" level="custom">
                        <property expression="json-eval($)" name="Res log====>"/>
                    </log>
                    <property description="catch response" expression="json-eval($)" name="response" scope="default" type="STRING"/>
                    <dataServiceCall description="write response into api logs" serviceName="NotificationsDS">
                        <operations type="single">
                            <operation name="updateApiLogHandler">
                                <param evaluator="xml" expression="$ctx:response" name="response"/>
                                <param evaluator="xml" expression="$ctx:req_id" name="req_id"/>
                            </operation>
                        </operations>
                        <source type="inline"/>
                        <target type="body"/>
                    </dataServiceCall>
                    <respond/>
                </then>
                <else>
                    <property description="response for no data from DB" name="response" scope="default" type="STRING" value="DB Error, No data from database"/>
                    <dataServiceCall description="write response into api logs" serviceName="NotificationsDS">
                        <operations type="single">
                            <operation name="updateApiLogHandler">
                                <param evaluator="xml" expression="$ctx:response" name="response"/>
                                <param evaluator="xml" expression="$ctx:req_id" name="req_id"/>
                            </operation>
                        </operations>
                        <source type="inline"/>
                        <target type="body"/>
                    </dataServiceCall>
                </else>
            </filter>
        </inSequence>
        <outSequence/>
        <faultSequence/>
    </resource>
</api>
